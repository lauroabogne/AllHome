package com.example.allhome.todo.viewmodel

import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.room.ColumnInfo
import androidx.room.PrimaryKey
import com.example.allhome.data.DAO.BillDAO
import com.example.allhome.data.DAO.ExpensesDAO
import com.example.allhome.expenses.viewmodel.ExpensesFragmentViewModel
import java.util.*

class CreateEditTodoFragmentViewModel: ViewModel() {

    var mTodoName:String? = null
    var mDueDateCalendar: MutableLiveData<Calendar> = MutableLiveData()
    var mRepeatUntilCalendar: MutableLiveData<Calendar> = MutableLiveData()



//        @PrimaryKey(autoGenerate = false)
//        @ColumnInfo(name = "auto_generated_unique_id",index = true) var autoGeneratedUniqueId:String,
//    @ColumnInfo(name = "name") var name:String,
//    @ColumnInfo(name = "due_date",defaultValue="0") var dueDate:Int,
//    @ColumnInfo(name = "repeat_until",defaultValue="0") var Re:Int,
//    @ColumnInfo(name = "notify",defaultValue="0") var notify:Int,
//    @ColumnInfo(name = "notify_type",defaultValue="none") var notifyType:String,
//    @ColumnInfo(name = "notify_every",defaultValue="0") var notifyEvery:Int,
//    @ColumnInfo(name = "notify_every_type",defaultValue="none") var notifyEveryType:String,
//    @ColumnInfo(name = "item_status",defaultValue="0") var itemStatus:Int,//0 active,1=deleted,2=permanently deleted
//    @ColumnInfo(name = "uploaded",defaultValue="0") var uploaded:Int //0=not yet uploaded,1=uploaded


}
class CreateEditTodoFragmentViewModelFactory : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(CreateEditTodoFragmentViewModel::class.java)) {
            @Suppress("UNCHECKED_CAST")
            return CreateEditTodoFragmentViewModel() as T

        }
        throw IllegalArgumentException("Unknown ViewModel class")
    }
}
