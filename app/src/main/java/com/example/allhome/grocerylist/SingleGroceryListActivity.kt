package com.example.allhome.grocerylist

import android.animation.Animator
import android.animation.ArgbEvaluator
import android.animation.ValueAnimator
import android.annotation.SuppressLint
import android.content.Intent
import android.graphics.Color
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.view.animation.Animation
import android.view.animation.ScaleAnimation
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.databinding.DataBindingUtil
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.ItemTouchHelper
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import androidx.recyclerview.widget.RecyclerView.OnScrollListener
import com.example.allhome.R
import com.example.allhome.data.entities.GroceryItemEntity
import com.example.allhome.databinding.ActivitySingleGroceryListBinding
import com.example.allhome.grocerylist.viewmodel.GroceryListViewModel
import com.example.allhome.grocerylist.viewmodel_factory.GroceryListViewModelFactory
import kotlinx.coroutines.*
import kotlinx.coroutines.Dispatchers.IO
import kotlinx.coroutines.Dispatchers.Main
import java.util.*


class SingleGroceryListActivity : AppCompatActivity() {

    lateinit var mGroceryListViewModel: GroceryListViewModel;
    lateinit var dataBindingUtil: ActivitySingleGroceryListBinding
    lateinit var mItemTouchHelper: ItemTouchHelper;
    var groceryListUniqueId: String = ""


    companion object {
        val ADD_ITEM_REQUEST = 1;
        val UPDATE_ITEM_REQUEST = 2;
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_single_grocery_list)
        supportActionBar?.setDisplayHomeAsUpEnabled(true)

        intent.getStringExtra(AddGroceryListItemActivity.GROCERY_LIST_UNIQUE_ID_EXTRA_DATA_TAG)?.let {
            groceryListUniqueId = it
        }


        // create AddGroceryListItemActivityViewModel using AddGroceryListItemActivityViewModelFactory
        val addGroceryListItemActivityViewModelFactory = GroceryListViewModelFactory(null, null)
        mGroceryListViewModel = ViewModelProvider(this, addGroceryListItemActivityViewModelFactory).get(
            GroceryListViewModel::class.java
        )


        //Bind data
        dataBindingUtil = DataBindingUtil.setContentView<ActivitySingleGroceryListBinding>(
            this, R.layout.activity_single_grocery_list
        ).apply {
            this.lifecycleOwner = this@SingleGroceryListActivity
            this.groceryListViewModel = mGroceryListViewModel


        }

        val groceryItemRecyclerViewAdapter = GroceryItemRecyclerViewAdapter(this)

        dataBindingUtil.groceryItemRecyclerview.adapter = groceryItemRecyclerViewAdapter

        mGroceryListViewModel.selectedGroceryList.observe(this, Observer {
            supportActionBar?.title = it.name;

        })

        mGroceryListViewModel.coroutineScope.launch {
            mGroceryListViewModel.setSelectedGroceryList(this@SingleGroceryListActivity, groceryListUniqueId)
        }




        if (mGroceryListViewModel.selectedGroceryListEntity == null) {

            mGroceryListViewModel.coroutineScope.launch {
                mGroceryListViewModel.setSelectedGroceryList(this@SingleGroceryListActivity, groceryListUniqueId)
                withContext(Main) {
                    //supportActionBar?.title = mGroceryListViewModel.selectedGroceryList?.name;
                    //Log.e("SELECTED ",mGroceryListViewModel.selectedGroceryList?.autoGeneratedUniqueId+" aa")

                }

            }
        }
        if (mGroceryListViewModel.selectedGroceryListItemList.isNullOrEmpty()) {

            mGroceryListViewModel.coroutineScope.launch {
                val groceryItemEntities = mGroceryListViewModel.getGroceryItems(this@SingleGroceryListActivity, groceryListUniqueId)
                mGroceryListViewModel.separateBougthItems(groceryItemEntities)
                mGroceryListViewModel.mergeToBuyAndBoughtItems(mGroceryListViewModel.toBuyGroceryItems, mGroceryListViewModel.boughtGroceryItems)
                groceryItemRecyclerViewAdapter.mGroceryItems = mGroceryListViewModel.selectedGroceryListItemList

                Log.e("TEST", "TEST 124")

                withContext(Main) {

                    groceryItemRecyclerViewAdapter.notifyDataSetChanged()
                }
            }
        } else {
           // groceryItemRecyclerViewAdapter.mGroceryItems = mGroceryListViewModel.selectedGroceryListItemList
            //groceryItemRecyclerViewAdapter.notifyDataSetChanged()
        }



        dataBindingUtil.fab.setOnClickListener(View.OnClickListener {
            val intent = Intent(this, AddGroceryListItemActivity::class.java)
            intent.putExtra(AddGroceryListItemActivity.GROCERY_LIST_UNIQUE_ID_EXTRA_DATA_TAG, groceryListUniqueId)
            startActivityForResult(intent, ADD_ITEM_REQUEST)

        })


        mItemTouchHelper = ItemTouchHelper(object : ItemTouchHelper.SimpleCallback(ItemTouchHelper.UP or ItemTouchHelper.DOWN, 0) {

            override fun getMovementFlags(recyclerView: RecyclerView, viewHolder: RecyclerView.ViewHolder): Int {

                val itemViewHolder: GroceryItemRecyclerViewAdapter.ItemViewHolder = viewHolder as GroceryItemRecyclerViewAdapter.ItemViewHolder
                val groceryItemEntity = itemViewHolder.groceryListItemBinding.groceryItemEntity

                if (groceryItemEntity!!.bought == 1 || groceryItemEntity.forCategoryDivider) {
                    return ItemTouchHelper.Callback.makeMovementFlags(
                        0,
                        0
                    )
                }
                val dragFlags = if (groceryItemRecyclerViewAdapter.mDraggable) ItemTouchHelper.UP or ItemTouchHelper.DOWN else 0
                return ItemTouchHelper.Callback.makeMovementFlags(
                    dragFlags,
                    0
                )
            }

            override fun isLongPressDragEnabled(): Boolean {
                return true
            }

            override fun onMove(recyclerView: RecyclerView, viewHolder: RecyclerView.ViewHolder, target: RecyclerView.ViewHolder): Boolean {

                val sourcePosition = viewHolder.adapterPosition
                val targetPosition = target.adapterPosition

                if (mGroceryListViewModel.sortingAndGrouping.value == GroceryListViewModel.SORT_ALPHABETICALLY) {
                    if (mGroceryListViewModel.toBuyGroceryItems.size - 1 >= targetPosition) {
                        Collections.swap(groceryItemRecyclerViewAdapter.mGroceryItems, sourcePosition, targetPosition)
                        groceryItemRecyclerViewAdapter?.notifyItemMoved(sourcePosition, targetPosition)

                        return true
                    }
                } else {
                    val itemViewHolderSource: GroceryItemRecyclerViewAdapter.ItemViewHolder = viewHolder as GroceryItemRecyclerViewAdapter.ItemViewHolder
                    val itemViewHolderTarget: GroceryItemRecyclerViewAdapter.ItemViewHolder = target as GroceryItemRecyclerViewAdapter.ItemViewHolder

                    val sourceGroceryItemEntity = itemViewHolderSource.groceryListItemBinding.groceryItemEntity
                    var targetGroceryItemEntity = itemViewHolderTarget.groceryListItemBinding.groceryItemEntity

                    if (targetGroceryItemEntity!!.forCategoryDivider || !sourceGroceryItemEntity!!.category.equals(targetGroceryItemEntity!!.category)
                        || targetGroceryItemEntity.bought == 1
                    ) {
                        return false
                    }
                    Collections.swap(groceryItemRecyclerViewAdapter.mGroceryItems, sourcePosition, targetPosition)
                    groceryItemRecyclerViewAdapter?.notifyItemMoved(sourcePosition, targetPosition)
                    return true
                }


                return false

            }

            @SuppressLint("ResourceAsColor")
            override fun clearView(recyclerView: RecyclerView, viewHolder: RecyclerView.ViewHolder) {
                super.clearView(recyclerView, viewHolder)

                groceryItemRecyclerViewAdapter?.itemDroped()

                mGroceryListViewModel.selectedGroceryListItemList = groceryItemRecyclerViewAdapter.mGroceryItems as ArrayList<GroceryItemEntity>


            }

            override fun onSelectedChanged(viewHolder: RecyclerView.ViewHolder?, actionState: Int) {
                super.onSelectedChanged(viewHolder, actionState)
                if (actionState == ItemTouchHelper.ACTION_STATE_DRAG) {

                    val itemViewHolder: GroceryItemRecyclerViewAdapter.ItemViewHolder = viewHolder as GroceryItemRecyclerViewAdapter.ItemViewHolder

                    //val cardView:CardView = itemViewHolder.groceryListItemBinding.groceryItemParentLayout

                }

            }

            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {
                TODO("Not yet implemented")
            }

        })
        mItemTouchHelper?.attachToRecyclerView(dataBindingUtil.groceryItemRecyclerview)
        groceryItemRecyclerViewAdapter.mTouchHelper = mItemTouchHelper
    }


    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        if (requestCode == ADD_ITEM_REQUEST && resultCode == RESULT_OK) {

            CoroutineScope(IO).launch {

                val groceryItemEntity = mGroceryListViewModel.getGroceryListItem(this@SingleGroceryListActivity, groceryListUniqueId)
                withContext(Main) {

                    var indexOfNewItem   = mGroceryListViewModel.addGroceryListItemToBuy(mGroceryListViewModel.toBuyGroceryItems, mGroceryListViewModel.boughtGroceryItems, groceryItemEntity)

                    if(mGroceryListViewModel.sortingAndGrouping.value == GroceryListViewModel.GROUP_BY_CATEGORY){
                        mGroceryListViewModel.groupByCategory()
                        indexOfNewItem = mGroceryListViewModel.selectedGroceryListItemList.indexOf(groceryItemEntity)
                    }

                    val scrollListener = object : OnScrollListener() {
                        var found = false
                        override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
                            val viewHolder = dataBindingUtil.groceryItemRecyclerview.findViewHolderForAdapterPosition(indexOfNewItem)
                            if (viewHolder != null && !found) {
                                val fadeInAnimation = ScaleAnimation(0f, 1f, 0f, 1f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f)
                                fadeInAnimation.duration = 500
                                fadeInAnimation.fillAfter = true
                                val itemViewHolder: GroceryItemRecyclerViewAdapter.ItemViewHolder = viewHolder as GroceryItemRecyclerViewAdapter.ItemViewHolder
                                itemViewHolder.groceryListItemBinding.groceryItemParentLayout.startAnimation(fadeInAnimation)

                                dataBindingUtil.groceryItemRecyclerview.removeOnScrollListener(this)
                                found = true
                            }


                        }
                    }

                    val firstVisibleItemPosition = ( dataBindingUtil.groceryItemRecyclerview.layoutManager as LinearLayoutManager).findFirstVisibleItemPosition()
                    val lastVisibleItemPosition = ( dataBindingUtil.groceryItemRecyclerview.layoutManager as LinearLayoutManager).findLastVisibleItemPosition()

                    if(indexOfNewItem >= firstVisibleItemPosition && indexOfNewItem <= lastVisibleItemPosition){

                        val viewHolder = dataBindingUtil.groceryItemRecyclerview.findViewHolderForAdapterPosition(indexOfNewItem)
                        dataBindingUtil.groceryItemRecyclerview.adapter?.notifyItemInserted(indexOfNewItem)
                        animateItem(viewHolder!!)


                    }else{

                        dataBindingUtil.groceryItemRecyclerview.addOnScrollListener(scrollListener)
                        dataBindingUtil.groceryItemRecyclerview.adapter?.notifyItemInserted(indexOfNewItem)
                        dataBindingUtil.groceryItemRecyclerview.scrollToPosition(indexOfNewItem)

                    }



                }

            }
        }
        else if (requestCode == UPDATE_ITEM_REQUEST && resultCode == RESULT_OK) {
            val updatedGroceryListId = data?.getIntExtra(AddGroceryListItemActivity.GROCERY_LIST_ITEM_ID_EXTRA_DATA_TAG, -1)
            val oldItemIndex = data?.getIntExtra(AddGroceryListItemActivity.GROCERY_LIST_ITEM_INDEX_EXTRA_DATA_TAG, -1)


            CoroutineScope(IO).launch {
                val groceryItemEntityUpdated = mGroceryListViewModel.getGroceryListItem(this@SingleGroceryListActivity, updatedGroceryListId!!, groceryListUniqueId)

                withContext(Main) {

                    val groceryItemEntity:GroceryItemEntity = mGroceryListViewModel.toBuyGroceryItems.find { it.id == updatedGroceryListId }!!

                    var itemNewIndex = 0;

                    if(groceryItemEntity?.bought == 1){
                       // val groceryItemEntity:GroceryItemEntity = mGroceryListViewModel.boughtGroceryItems.find { it.id == updatedGroceryListId }!!
                        mGroceryListViewModel.boughtGroceryItems.set(mGroceryListViewModel.toBuyGroceryItems.indexOf(groceryItemEntity), groceryItemEntityUpdated!!)
                    }else{


                        mGroceryListViewModel.toBuyGroceryItems.set(mGroceryListViewModel.toBuyGroceryItems.indexOf(groceryItemEntity), groceryItemEntityUpdated!!)
                        //Log.e("NEW_DATA",groceryItemEntity.itemName+" "+groceryItemEntity.category)

                        //Log.e("found not bought",groceryItemEntity.itemName+" "+itemIndex )
                    }

                    mGroceryListViewModel.mergeToBuyAndBoughtItems(mGroceryListViewModel.toBuyGroceryItems, mGroceryListViewModel.boughtGroceryItems)

                    if(mGroceryListViewModel.sortingAndGrouping.value == GroceryListViewModel.SORT_ALPHABETICALLY){

                        itemNewIndex = mGroceryListViewModel.selectedGroceryListItemList.indexOf(groceryItemEntityUpdated)
                        dataBindingUtil.groceryItemRecyclerview.adapter?.notifyItemMoved(oldItemIndex!!, itemNewIndex)
                    }else{

                        mGroceryListViewModel.groupByCategory()
                        itemNewIndex = mGroceryListViewModel.selectedGroceryListItemList.indexOf(groceryItemEntityUpdated)
                        dataBindingUtil.groceryItemRecyclerview.adapter?.notifyItemMoved(oldItemIndex!!, itemNewIndex)



                    }

                    val scrollListener = object : OnScrollListener() {
                        var found = false
                        override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
                            val viewHolder = dataBindingUtil.groceryItemRecyclerview.findViewHolderForAdapterPosition(itemNewIndex)
                            if (viewHolder != null && !found) {
                                val fadeInAnimation = ScaleAnimation(0f, 1f, 0f, 1f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f)
                                fadeInAnimation.duration = 500
                                fadeInAnimation.fillAfter = true
                                val itemViewHolder: GroceryItemRecyclerViewAdapter.ItemViewHolder = viewHolder as GroceryItemRecyclerViewAdapter.ItemViewHolder
                                itemViewHolder.groceryListItemBinding.groceryItemParentLayout.startAnimation(fadeInAnimation)
                                dataBindingUtil.groceryItemRecyclerview.removeOnScrollListener(this)


                                found = true
                            }


                        }
                    }

                    val firstVisibleItemPosition = ( dataBindingUtil.groceryItemRecyclerview.layoutManager as LinearLayoutManager).findFirstVisibleItemPosition()
                    val lastVisibleItemPosition = ( dataBindingUtil.groceryItemRecyclerview.layoutManager as LinearLayoutManager).findLastVisibleItemPosition()

                    if(itemNewIndex >= firstVisibleItemPosition && itemNewIndex <= lastVisibleItemPosition){

                        val viewHolder = dataBindingUtil.groceryItemRecyclerview.findViewHolderForAdapterPosition(itemNewIndex)
                        animateItem(viewHolder!!)

                    }else{

                        dataBindingUtil.groceryItemRecyclerview.addOnScrollListener(scrollListener)
                        dataBindingUtil.groceryItemRecyclerview.scrollToPosition(itemNewIndex)
                    }

                    dataBindingUtil.groceryItemRecyclerview.adapter?.notifyItemChanged(itemNewIndex)
                }
            }


        } else {
            Toast.makeText(this, "OTHER", Toast.LENGTH_SHORT).show()
        }
    }

    fun animateItem(viewHolder: RecyclerView.ViewHolder){


            /*val fadeInAnimation = ScaleAnimation(0f, 1f, 0f, 1f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f)
            fadeInAnimation.duration = 1000
            fadeInAnimation.fillAfter = true
            val itemViewHolder: GroceryItemRecyclerViewAdapter.ItemViewHolder = viewHolder as GroceryItemRecyclerViewAdapter.ItemViewHolder
            itemViewHolder.groceryListItemBinding.root.startAnimation(fadeInAnimation)*/




    }
    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menuInflater.inflate(R.menu.single_grocery_item_menu, menu)
        return true
    }
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        when(item.itemId){
            android.R.id.home -> {
                finish()
            }
            R.id.menu_sort_by_category -> {
                mGroceryListViewModel.sortingAndGrouping.value = GroceryListViewModel.GROUP_BY_CATEGORY
                mGroceryListViewModel.coroutineScope.launch {
                    Log.e("Group by ", ": I'm working in thread ${Thread.currentThread().name}")
                    Log.e("Group by ", this.coroutineContext.toString())

                    mGroceryListViewModel.groupByCategory()

                    withContext(Main) {
                        dataBindingUtil.groceryItemRecyclerview.adapter?.notifyDataSetChanged()
                    }
                }
            }
            R.id.menu_sort_by_item -> {
                mGroceryListViewModel.sortingAndGrouping.value = GroceryListViewModel.SORT_ALPHABETICALLY

                mGroceryListViewModel.coroutineScope.launch {
                    Log.e("Alphabetically", ": I'm working in thread ${Thread.currentThread().name}")
                    Log.e("Alphabetically", this.coroutineContext.toString())
                    mGroceryListViewModel.sortAlpahetically(mGroceryListViewModel.toBuyGroceryItems, mGroceryListViewModel.boughtGroceryItems)
                    mGroceryListViewModel.mergeToBuyAndBoughtItems(mGroceryListViewModel.toBuyGroceryItems, mGroceryListViewModel.boughtGroceryItems)

                    withContext(Main) {
                        Log.e("TEST", "TEST 123")
                        dataBindingUtil.groceryItemRecyclerview.adapter?.notifyDataSetChanged()
                    }
                }
            }
        }
        return true
    }
}